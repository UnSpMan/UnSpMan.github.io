<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UnSpMan</title>
  
  <subtitle>无敌于世间</subtitle>
  <link href="https://unspman.github.io/atom.xml" rel="self"/>
  
  <link href="https://unspman.github.io/"/>
  <updated>2023-03-14T16:14:16.590Z</updated>
  <id>https://unspman.github.io/</id>
  
  <author>
    <name>佩奇</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>word</title>
    <link href="https://unspman.github.io/posts/c3f17511.html"/>
    <id>https://unspman.github.io/posts/c3f17511.html</id>
    <published>2023-03-06T11:29:30.000Z</published>
    <updated>2023-03-14T16:14:16.590Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-中英混合时，一行很多莫名空格："><a href="#1-中英混合时，一行很多莫名空格：" class="headerlink" title="1.中英混合时，一行很多莫名空格："></a>1.中英混合时，一行很多莫名空格：</h4><p>选中字段—&gt;右键—&gt;段落(若在单元格内则无段落选项)—&gt;换行和分页—&gt;允许西文换行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-中英混合时，一行很多莫名空格：&quot;&gt;&lt;a href=&quot;#1-中英混合时，一行很多莫名空格：&quot; class=&quot;headerlink&quot; title=&quot;1.中英混合时，一行很多莫名空格：&quot;&gt;&lt;/a&gt;1.中英混合时，一行很多莫名空格：&lt;/h4&gt;&lt;p&gt;选中字段—&amp;gt;右</summary>
      
    
    
    
    <category term="word" scheme="https://unspman.github.io/categories/word/"/>
    
    
    <category term="word" scheme="https://unspman.github.io/tags/word/"/>
    
  </entry>
  
  <entry>
    <title>spider</title>
    <link href="https://unspman.github.io/posts/6ad76a84.html"/>
    <id>https://unspman.github.io/posts/6ad76a84.html</id>
    <published>2023-03-03T11:29:30.000Z</published>
    <updated>2023-03-14T16:14:16.590Z</updated>
    
    <content type="html"><![CDATA[<h5 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式:"></a>基本格式:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/web&#x27;</span></span><br><span class="line">    kw = <span class="built_in">input</span>(<span class="string">&#x27;enter a word:&#x27;</span>)</span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;query&#x27;</span>:kw</span><br><span class="line">    &#125;</span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.57&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=url, params=param, headers=header)</span><br><span class="line">    page_text = response.text</span><br><span class="line">    fileName = kw+<span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;over!&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;基本格式&quot;&gt;&lt;a href=&quot;#基本格式&quot; class=&quot;headerlink&quot; title=&quot;基本格式:&quot;&gt;&lt;/a&gt;基本格式:&lt;/h5&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;</summary>
      
    
    
    
    <category term="spider" scheme="https://unspman.github.io/categories/spider/"/>
    
    
    <category term="spider" scheme="https://unspman.github.io/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda使用</title>
    <link href="https://unspman.github.io/posts/feaec37.html"/>
    <id>https://unspman.github.io/posts/feaec37.html</id>
    <published>2023-03-02T11:29:30.000Z</published>
    <updated>2023-03-14T16:14:16.590Z</updated>
    
    <content type="html"><![CDATA[<h3 id="anaconda-安装"><a href="#anaconda-安装" class="headerlink" title="anaconda 安装"></a>anaconda 安装</h3><p><a href="https://www.anaconda.com/products/distribution#macos">官网下载(非常慢不推荐)</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">清华大学镜像站下载</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.2.0-Windows-x86_64.exe">个人使用版本</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141049189.png" alt="1"><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141050191.png" alt="2"><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141050059.png" alt="3"><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141050496.png" alt="4"><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141050718.png" alt="5"></p><h4 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h4><p>cmd输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/20200108134410262.png" alt="若出现像这样的conda版本号即安装成功"></p><h4 id="更改源"><a href="#更改源" class="headerlink" title="更改源"></a>更改源</h4><p>安装需要的Python包非常方便，但是官方服务器在国外，下载龟速，国内清华大学提供了Anaconda的镜像仓库，我们把源改为清华大学镜像源</p><p>更改方法一：cmd后依次输入下面命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><br>打开C盘用户目录，我这里是<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\User</span><br></pre></td></tr></table></figure><br>找到.condarc文件，里面长这样就成了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssl_verify: true</span><br><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br></pre></td></tr></table></figure><br>更改方法二：打开 .condarc文件，直接简单粗暴的把上面的内容复制进去</p><h4 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h4><p>更新时间较长，建议找个空余时间更新,不更新也可以，但为避免后续安装其他东西出错最好更一下，这里我就不更了，把命令贴出来</p><p>先更新conda<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure><br>再更新第三方所有包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda upgrade --all</span><br></pre></td></tr></table></figure></p><h3 id="Anaconda-修改默认虚拟环境安装位置"><a href="#Anaconda-修改默认虚拟环境安装位置" class="headerlink" title="Anaconda 修改默认虚拟环境安装位置"></a>Anaconda 修改默认虚拟环境安装位置</h3><p>保存虚拟环境的默认地址是C盘，而我想将下载的虚拟环境保存到我自定义的位置</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --show</span><br></pre></td></tr></table></figure><p>查看envs_dirs的信息，一般第一个路径是默认路径。把它修改成想要自定义的路径<br>方法1: windows+r输入%HOMEPATH% 找到.condarc文件，用记事本打开，将自定义文件夹的路径append到文件中。<br>比如:<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141051425.png" alt="6"><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141051415.png" alt="7"><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141051114.png" alt="8"><br>注意: 我看了很多材料说是把Anaconda3文件夹的只读属性去掉(右键属性即可找到)。但是我尝试后，新创建的虚拟环境还是在C盘。<br>⭐故大家在改完Anaconda3的文件夹属性后没成功的话可以试试，将envs文件夹(这是我的文件夹，因人而异)的只读属性去掉，并且在属性–&gt;安全–&gt;User中将权限全都勾上。此时再Anaconda Prompt中创建虚拟环境应该就没问题了。⭐</p><h4 id="在Anaconda-Prompt中使用命令，添加新的虚拟环境作为默认环境"><a href="#在Anaconda-Prompt中使用命令，添加新的虚拟环境作为默认环境" class="headerlink" title="在Anaconda Prompt中使用命令，添加新的虚拟环境作为默认环境"></a>在Anaconda Prompt中使用命令，添加新的虚拟环境作为默认环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add envs_dirs 虚拟环境的绝对路径</span><br></pre></td></tr></table></figure><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><p>查看anaconda的环境配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --show</span><br></pre></td></tr></table></figure></p><p>修改配置语法<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --add key value #添加语法</span><br><span class="line">conda config --remove key value #删除语法</span><br></pre></td></tr></table></figure><br>其中，key为 envs_dirs、pkgs_dirs等   value为key对应的值</p><p>添加、删除envs_dirs:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --add envs_dirs dir</span><br><span class="line">conda config --remove envs_dirs dir</span><br></pre></td></tr></table></figure><br>例如:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --add envs_dirs E:/File/Anaconda3/envs</span><br><span class="line">conda config --remove envs_dirs /Users/Lsz/.conda/envs</span><br></pre></td></tr></table></figure><br>这里记住要用 ” / “</p><p>如果想调整envs_dirs安装顺序， 也是采用conda config —add envs_dirs dir语法， 直接把顺序贴过去就行（如下图所示）<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141051792.png" alt="9"><br>再次查看anconda环境配置，就可以发现默认虚拟环境安装位置已经修改过来了。<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141052356.png" alt="10"></p><h3 id="anaconda使用"><a href="#anaconda使用" class="headerlink" title="anaconda使用"></a>anaconda使用</h3><h4 id="与软件包相关"><a href="#与软件包相关" class="headerlink" title="与软件包相关"></a>与软件包相关</h4><p>安装某一个包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install package_name</span><br></pre></td></tr></table></figure><br>卸载包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove package_name</span><br></pre></td></tr></table></figure><br>更新某一个具体的包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda upgrade package_name</span><br></pre></td></tr></table></figure></p><h4 id="与环境有关的命令"><a href="#与环境有关的命令" class="headerlink" title="与环境有关的命令"></a>与环境有关的命令</h4><p>创建新的环境<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n env_name package_names</span><br></pre></td></tr></table></figure><br>需要注意的是，这里的package_names是可选参数，也就是可以通过设定。实现具体包的预安装以及包版本的管理</p><p>进入环境<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate env_name</span><br></pre></td></tr></table></figure></p><p>退出环境<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></p><p>删除环境<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env remove -n env_name</span><br></pre></td></tr></table></figure></p><p>查看当前环境下的包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">list</span></span><br></pre></td></tr></table></figure></p><p>查看环境<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env <span class="built_in">list</span></span><br></pre></td></tr></table></figure></p><h3 id="Anaconda-环境变量手动设置"><a href="#Anaconda-环境变量手动设置" class="headerlink" title="Anaconda 环境变量手动设置"></a>Anaconda 环境变量手动设置</h3><p>以下就是需要添加的环境变量，相应用户的目录存在差异，但是后面的路径名称相同<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\anaconda</span><br><span class="line">D:\anaconda\Scripts\</span><br><span class="line">D:\anaconda\Library\bin</span><br><span class="line">D:\anaconda\Library\mingw-w64\bin</span><br></pre></td></tr></table></figure><br>重新启动运行命令框，再次输入conda，如果出现以下显示：<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141052320.png" alt="11"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;anaconda-安装&quot;&gt;&lt;a href=&quot;#anaconda-安装&quot; class=&quot;headerlink&quot; title=&quot;anaconda 安装&quot;&gt;&lt;/a&gt;anaconda 安装&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.anaconda.com/</summary>
      
    
    
    
    <category term="Anaconda" scheme="https://unspman.github.io/categories/Anaconda/"/>
    
    
    <category term="Anaconda" scheme="https://unspman.github.io/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap</title>
    <link href="https://unspman.github.io/posts/d352c4d3.html"/>
    <id>https://unspman.github.io/posts/d352c4d3.html</id>
    <published>2023-03-02T11:29:30.000Z</published>
    <updated>2023-03-14T16:14:16.590Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://v3.bootcss.com/getting-started/#download">下载地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://v3.bootcss.com/getting-started/#download&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Bootstrap" scheme="https://unspman.github.io/categories/Bootstrap/"/>
    
    
    <category term="Bootstrap" scheme="https://unspman.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>明日方舟脚本</title>
    <link href="https://unspman.github.io/posts/882f1047.html"/>
    <id>https://unspman.github.io/posts/882f1047.html</id>
    <published>2023-01-22T13:29:30.000Z</published>
    <updated>2023-03-14T16:14:16.590Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MAA"><a href="#MAA" class="headerlink" title="MAA"></a>MAA</h3><p><a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights">脚本出处</a></p><p>功能：</p><ul><li>刷理智，掉落识别及上传 <a href="https://penguin-stats.cn/">企鹅物流</a></li><li>智能基建换班，自动计算干员效率，单设施内最优解；同时也支持 <a href="https://maa.plus/docs/3.6-%E5%9F%BA%E5%BB%BA%E6%8E%92%E7%8F%AD%E5%8D%8F%E8%AE%AE.html">自定义排班</a></li><li>自动公招，可选使用加急许可，一次全部刷完！公招数据上传 <a href="https://penguin-stats.cn/result/stage/recruit/recruit">企鹅物流</a>，<a href="https://yituliu.site/maarecruitdata">一图流</a></li><li>访问好友、收取信用及购物、领取日常奖励等。一键全日常自动长草！</li><li>肉鸽全自动刷源石锭和蜡烛，自动识别干员及练度</li><li>选择作业 JSON 文件，自动抄作业！ <a href="https://www.bilibili.com/video/BV1H841177Fk/">视频演示</a></li><li>仓库识别并支持导出至 <a href="https://penguin-stats.cn/planner">企鹅物流刷图规划器</a>, <a href="https://arkn.lolicon.app/#/material">明日方舟工具箱</a>, <a href="https://ark-nights.com/settings">ARK-NIGHTS 干员培养表</a></li><li>支持 C, Python, Java, Rust, Golang, Java HTTP, Rust HTTP 等多种接口，方便集成调用，自定义你的 MAA！</li></ul><h3 id="一、模拟器下载"><a href="#一、模拟器下载" class="headerlink" title="一、模拟器下载"></a>一、模拟器下载</h3><p><a href="https://www.bluestacks.com/tw/index.html">BlueStack5</a></p><p>需要在模拟器“设定 - 进阶” 中打开 “Android调试桥”</p><h3 id="二、明日方舟APK文件下载"><a href="#二、明日方舟APK文件下载" class="headerlink" title="二、明日方舟APK文件下载"></a>二、明日方舟APK文件下载</h3><p><a href="https://ak.hypergryph.com/">明日方舟 - Arknights </a></p><p>右键选择模拟器打开</p><h3 id="三、阿巴阿巴"><a href="#三、阿巴阿巴" class="headerlink" title="三、阿巴阿巴"></a>三、阿巴阿巴</h3><p>保全派驻作业路径：MAA\MAA-v4.10.10-win-x64\resource\copilot\SSS_阿卡胡拉丛林.json</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;MAA&quot;&gt;&lt;a href=&quot;#MAA&quot; class=&quot;headerlink&quot; title=&quot;MAA&quot;&gt;&lt;/a&gt;MAA&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/MaaAssistantArknights/MaaAssistantArkn</summary>
      
    
    
    
    <category term="js" scheme="https://unspman.github.io/categories/js/"/>
    
    
    <category term="脚本" scheme="https://unspman.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(1.Node.js下载)</title>
    <link href="https://unspman.github.io/posts/bbdab10f.html"/>
    <id>https://unspman.github.io/posts/bbdab10f.html</id>
    <published>2023-01-07T00:00:00.000Z</published>
    <updated>2023-03-14T16:14:16.590Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用express搭建服务器程序"><a href="#使用express搭建服务器程序" class="headerlink" title="使用express搭建服务器程序"></a>使用express搭建服务器程序</h3><p><a href="https://expressjs.com/zh-cn/starter/hello-world.html">快速入门</a></p><h4 id="cd到express下安装express"><a href="#cd到express下安装express" class="headerlink" title="cd到express下安装express"></a>cd到express下安装express</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><h4 id="简单搭建一个express服务器"><a href="#简单搭建一个express服务器" class="headerlink" title="简单搭建一个express服务器"></a>简单搭建一个express服务器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装express</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.引入express</span></span><br><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//2.创建app对象(app项目对象)</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//4.处理请求</span></span><br><span class="line"><span class="comment">//第一个参数是请求路径，第二个参数是针对于这个路径的处理函数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//函数有两个形参</span></span><br><span class="line">    <span class="comment">//第一个形参req是请求对象，第二个参数res是响应对象</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;hello express框架&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//3.监听是否有请求</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index.html&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取文件路径</span></span><br><span class="line">    <span class="keyword">let</span> filePath=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;views&#x27;</span>,<span class="string">&#x27;index.html&#x27;</span>);</span><br><span class="line">    <span class="comment">//获取文件信息</span></span><br><span class="line">    <span class="keyword">let</span> content=fs.<span class="title function_">readFileSync</span>(filePath,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(content);</span><br><span class="line">    <span class="comment">//获取请求参数 http://localhost:3001/index.html?name=nodejs&amp;age=18</span></span><br><span class="line">    <span class="keyword">let</span> query=req.<span class="property">query</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(query); <span class="comment">// &#123; name: &#x27;nodejs&#x27;, age: &#x27;18&#x27; &#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(query.<span class="property">name</span>,query.<span class="property">age</span>);  <span class="comment">// nodejs 18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><p>先安装body-parser<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add body-parser</span><br></pre></td></tr></table></figure><br>处理post请求方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入body-parser模块</span></span><br><span class="line"><span class="keyword">const</span> bodyParser=<span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="comment">//将body-parser功能添加到项目app中</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));<span class="comment">//false:接收的值为字符串或者数组，true为任意类型</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());<span class="comment">//解析json格式</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/register.html&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> filePath=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;views&#x27;</span>,<span class="string">&#x27;register.html&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> content=fs.<span class="title function_">readFileSync</span>(filePath,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(content);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/register.html&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> body=req.<span class="property">body</span>;</span><br><span class="line">    <span class="comment">//结构赋值 获取数据</span></span><br><span class="line">    <span class="keyword">let</span> &#123;username,email,password&#125;=body;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    [Object: null prototype] &#123;</span></span><br><span class="line"><span class="comment">    username: &#x27;lihua&#x27;,</span></span><br><span class="line"><span class="comment">    email: &#x27;3064459131@qq.com&#x27;,</span></span><br><span class="line"><span class="comment">    password: &#x27;123456&#x27;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username,email,password); <span class="comment">//lihua 3064459131@qq.com 123456</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;pos提交成功&#x27;</span>);</span><br><span class="line">    <span class="comment">//后端业务逻辑</span></span><br><span class="line">    <span class="comment">//获取请求参数</span></span><br><span class="line">    <span class="comment">//对参数进行处理</span></span><br><span class="line">    <span class="comment">//查询数据库，判断用户名是否注册，密码等</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>register.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span>,<span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/register.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;使用express搭建服务器程序&quot;&gt;&lt;a href=&quot;#使用express搭建服务器程序&quot; class=&quot;headerlink&quot; title=&quot;使用express搭建服务器程序&quot;&gt;&lt;/a&gt;使用express搭建服务器程序&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="后端" scheme="https://unspman.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Node.js" scheme="https://unspman.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(5.书写一个web服务器)</title>
    <link href="https://unspman.github.io/posts/2e37f720.html"/>
    <id>https://unspman.github.io/posts/2e37f720.html</id>
    <published>2023-01-06T00:00:00.000Z</published>
    <updated>2023-03-14T16:14:16.590Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303142200924.jpg" alt=""></p><h3 id="书写一个web服务器"><a href="#书写一个web服务器" class="headerlink" title="书写一个web服务器"></a>书写一个web服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">//端口号</span></span><br><span class="line"><span class="keyword">const</span> port=<span class="number">8080</span>;</span><br><span class="line"><span class="comment">//创建服务器对象</span></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//每收到一次请求就会执行一次</span></span><br><span class="line">    <span class="comment">//判断浏览器的请求</span></span><br><span class="line">    <span class="keyword">let</span> reqUrl=request.<span class="property">url</span>;</span><br><span class="line">    <span class="keyword">if</span>(reqUrl==<span class="string">&#x27;/&#x27;</span> || reqUrl==<span class="string">&#x27;/index.html&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> filePath=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;assets&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;index.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> content=fs.<span class="title function_">readFileSync</span>(filePath);</span><br><span class="line">        response.<span class="title function_">end</span>(content);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(reqUrl==<span class="string">&#x27;/cate.html&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> filePath=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;assets&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;cate.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> content=fs.<span class="title function_">readFileSync</span>(filePath);</span><br><span class="line">        response.<span class="title function_">end</span>(content);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(reqUrl.<span class="title function_">endsWith</span>(<span class="string">&#x27;.css&#x27;</span>))&#123;</span><br><span class="line">        <span class="keyword">let</span> filePath=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;assets&#x27;</span>,<span class="string">&#x27;css&#x27;</span>,<span class="string">&#x27;index.css&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> content=fs.<span class="title function_">readFileSync</span>(filePath);</span><br><span class="line">        response.<span class="title function_">end</span>(content);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;404,报错了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//服务器监听</span></span><br><span class="line">server.<span class="title function_">listen</span>(port,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器运行成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="npm的使用-基于nodejs包管理器"><a href="#npm的使用-基于nodejs包管理器" class="headerlink" title="npm的使用(基于nodejs包管理器)"></a><a href="https://www.npmjs.com/">npm的使用(基于nodejs包管理器)</a></h3><p>第三方模块，别人写好的，需要安装</p><h4 id="npm使用"><a href="#npm使用" class="headerlink" title="npm使用"></a>npm使用</h4><p>项目初始化 package.json记录项目相关信息<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><br>eg:下载md5<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install md5</span><br></pre></td></tr></table></figure><br>使用第三方模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> md5=<span class="built_in">require</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">md5</span>(<span class="string">&#x27;123456&#x27;</span>));<span class="comment">//e10adc3949ba59abbe56e057f20f883e</span></span><br></pre></td></tr></table></figure></p><h3 id="yarn-基于nodejs的包管理器"><a href="#yarn-基于nodejs的包管理器" class="headerlink" title="yarn(基于nodejs的包管理器)"></a><a href="https://www.yarnpkg.cn/">yarn(基于nodejs的包管理器)</a></h3><p><a href="https://yarn.bootcss.com/">中文版</a><br>安装 -g代表全局安装<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><br>项目初始化<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure><br>eg:下载md5<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm add md5</span><br></pre></td></tr></table></figure><br>使用第三方模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> md5=<span class="built_in">require</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">md5</span>(<span class="string">&#x27;123456&#x27;</span>));<span class="comment">//e10adc3949ba59abbe56e057f20f883e</span></span><br></pre></td></tr></table></figure></p><h3 id="async和await使用-异步的终极方案"><a href="#async和await使用-异步的终极方案" class="headerlink" title="async和await使用(异步的终极方案)"></a>async和await使用(异步的终极方案)</h3><h4 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">fileone=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;1.txt&#x27;</span>);</span><br><span class="line">filetwo=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;2.txt&#x27;</span>);</span><br><span class="line">filethree=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;3.txt&#x27;</span>);</span><br><span class="line">filedata=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;data.txt&#x27;</span>);</span><br><span class="line"><span class="comment">//封装一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readFilePromise</span>(<span class="params">fileName</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//异步操作</span></span><br><span class="line">        fs.<span class="title function_">readFile</span>(fileName,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">error,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                <span class="title function_">reject</span>(error);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">resolve</span>(data); <span class="comment">//data就是读取到的内容</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//await必须要放在async function函数内部</span></span><br><span class="line"><span class="comment">//async function需要调用,多了一个await 外观同步执行，实质上是异步</span></span><br><span class="line"><span class="comment">//执行第一个异步操作后，再执行第二个异步操作</span></span><br><span class="line"><span class="comment">//async await一般后面就是接promise对象</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">/* 不使用await的p1,p2,p3输出</span></span><br><span class="line"><span class="comment">    Promise &#123; &lt;pending&gt; &#125;</span></span><br><span class="line"><span class="comment">    Promise &#123; &lt;pending&gt; &#125;</span></span><br><span class="line"><span class="comment">    Promise &#123; &lt;pending&gt; &#125;</span></span><br><span class="line"><span class="comment">        使用await的p1,p2,p3输出,能直接读取到内容</span></span><br><span class="line"><span class="comment">    1hello</span></span><br><span class="line"><span class="comment">    2nihao</span></span><br><span class="line"><span class="comment">    3hhalala</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">let</span> p1=<span class="keyword">await</span> <span class="title function_">readFilePromise</span>(fileone)   <span class="comment">//直接拿到promise对象成功的数据</span></span><br><span class="line">    <span class="keyword">let</span> p2=<span class="keyword">await</span> <span class="title function_">readFilePromise</span>(filetwo)</span><br><span class="line">    <span class="keyword">let</span> p3=<span class="keyword">await</span> <span class="title function_">readFilePromise</span>(filethree)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p3);</span><br><span class="line">    fs.<span class="title function_">writeFile</span>(filedata,p1+p2+p3,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>();</span><br></pre></td></tr></table></figure><h4 id="Async-Await-简介"><a href="#Async-Await-简介" class="headerlink" title="Async/Await 简介"></a>Async/Await 简介</h4><p>对于从未听说过 async/await 的朋友，下面是简介:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">async/await 是写异步代码的新方式，以前的方法有回调函数和Promise。</span><br><span class="line">async/await 是基于 Promise 实现的，它不能用于普通的回调函数。</span><br><span class="line">async/await 与 Promise 一样，是非阻塞的。</span><br><span class="line">async/await 使得异步代码看起来像同步代码，这正是它的魔力所在。</span><br></pre></td></tr></table></figure></p><h4 id="Async-Await-语法"><a href="#Async-Await-语法" class="headerlink" title="Async/Await 语法"></a>Async/Await 语法</h4><p>示例中，getJSON 函数返回一个 promise，这个 promise 成功 resolve 时会返回一个 json 对象。我们只是调用这个函数，打印返回的 JSON 对象，然后返回”done”。</p><p>使用 Promise 是这样的:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">    <span class="title function_">getJSON</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;done&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">makeRequest</span>();</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">getJSON</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;done&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">makeRequest</span>();</span><br></pre></td></tr></table></figure><p>它们有一些细微不同:</p><p>函数前面多了一个 async 关键字。await 关键字只能用在 async 定义的函数内。async 函数会隐式地返回一个 promise，该 promise 的 reosolve 值就是函数 return 的值。(示例中 reosolve 值就是字符串”done”)</p><p>第 1 点暗示我们不能在最外层代码中使用 await，因为不在 async 函数内。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不能在最外层代码中使用await</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">makeRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是会出事情的</span></span><br><span class="line"><span class="title function_">makeRequest</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>await getJSON()表示 console.log 会等到 getJSON 的 promise 成功 reosolve 之后再执行。</p><h4 id="为什么-Async-Await-更好？"><a href="#为什么-Async-Await-更好？" class="headerlink" title="为什么 Async/Await 更好？"></a>为什么 Async/Await 更好？</h4><ol><li>简洁<br>由示例可知，使用 Async/Await 明显节约了不少代码。我们不需要写.then，不需要写匿名函数处理 Promise 的 resolve 值，也不需要定义多余的 data 变量，还避免了嵌套代码。这些小的优点会迅速累计起来，这在之后的代码示例中会更加明显。</li><li>错误处理<br>Async/Await 让 try/catch 可以同时处理同步和异步错误。在下面的 promise 示例中，try/catch 不能处理 JSON.parse 的错误，因为它在 Promise 中。我们需要使用.catch，这样错误处理代码非常冗余。并且，在我们的实际生产代码会更加复杂。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">getJSON</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// JSON.parse可能会出错</span></span><br><span class="line">            <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 取消注释，处理异步代码的错误</span></span><br><span class="line">        <span class="comment">// .catch((err) =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//   console.log(err)</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>使用 async/await 的话，catch 能处理 JSON.parse 错误:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// this parse may fail</span></span><br><span class="line">        <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="keyword">await</span> <span class="title function_">getJSON</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>条件语句<br>下面示例中，需要获取数据，然后根据返回数据决定是直接返回，还是继续获取更多的数据。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getJSON</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">needsAnotherRequest</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">makeAnotherRequest</span>(data).<span class="title function_">then</span>(<span class="function"><span class="params">moreData</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(moreData);</span><br><span class="line">                <span class="keyword">return</span> moreData;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>这些代码看着就头痛。嵌套（6 层），括号，return 语句很容易让人感到迷茫，而它们只是需要将最终结果传递到最外层的 Promise。</li></ol><p>上面的代码使用 async/await 编写可以大大地提高可读性:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getJSON</span>();</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">needsAnotherRequest</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> moreData = <span class="keyword">await</span> <span class="title function_">makeAnotherRequest</span>(data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(moreData);</span><br><span class="line">        <span class="keyword">return</span> moreData;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ol><li>中间值<br>你很可能遇到过这样的场景，调用 promise1，使用 promise1 返回的结果去调用 promise2，然后使用两者的结果去调用 promise3。你的代码很可能是这样的:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">promise1</span>().<span class="title function_">then</span>(<span class="function"><span class="params">value1</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">promise2</span>(value1).<span class="title function_">then</span>(<span class="function"><span class="params">value2</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">promise3</span>(value1, value2);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>如果 promise3 不需要 value1，可以很简单地将 promise 嵌套铺平。如果你忍受不了嵌套，你可以将 value 1 &amp; 2 放进 Promise.all 来避免深层嵌套：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">promise1</span>()</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">value1</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([value1, <span class="title function_">promise2</span>(value1)]);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">[value1, value2]</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">promise3</span>(value1, value2);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>这种方法为了可读性牺牲了语义。除了避免嵌套，并没有其他理由将 value1 和 value2 放在一个数组中。</li></ol><p>使用 async/await 的话，代码会变得异常简单和直观。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> value1 = <span class="keyword">await</span> <span class="title function_">promise1</span>();</span><br><span class="line">    <span class="keyword">const</span> value2 = <span class="keyword">await</span> <span class="title function_">promise2</span>(value1);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">promise3</span>(value1, value2);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>错误栈<br>下面示例中调用了多个 Promise，假设 Promise 链中某个地方抛出了一个错误:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">callAPromise</span>()</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">callAPromise</span>())</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">callAPromise</span>())</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">callAPromise</span>())</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">callAPromise</span>())</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;oops&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">makeRequest</span>().<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="comment">// Error: oops at callAPromise.then.then.then.then.then (index.js:8:13)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>Promise 链中返回的错误栈没有给出错误发生位置的线索。更糟糕的是，它会误导我们；错误栈中唯一的函数名为 callAPromise，然而它和错误没有关系。(文件名和行号还是有用的)。</li></ol><p>然而，async/await 中的错误栈会指向错误所在的函数:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">makeRequest</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">callAPromise</span>();</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">callAPromise</span>();</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">callAPromise</span>();</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">callAPromise</span>();</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">callAPromise</span>();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;oops&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">makeRequest</span>().<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="comment">// Error: oops at makeRequest (index.js:7:9)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>在开发环境中，这一点优势并不大。但是，当你分析生产环境的错误日志时，它将非常有用。这时，知道错误发生在 makeRequest 比知道错误发生在 then 链中要好。</p><ol><li>调试<br>最后一点，也是非常重要的一点在于，async/await 能够使得代码调试更简单。2 个理由使得调试 Promise 变得非常痛苦:</li></ol><p>不能在返回表达式的箭头函数中设置断点<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303142143534.png" alt=""><br>如果你在.then 代码块中设置断点，使用 Step Over 快捷键，调试器不会跳到下一个.then，因为它只会跳过异步代码。<br>使用 await/async 时，你不再需要那么多箭头函数，这样你就可以像调试同步代码一样跳过 await 语句。<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303142143147.png" alt=""><br>结论<br>Async/Await 是近年来 JavaScript 添加的最革命性的特性之一。它会让你发现 Promise 的语法有多糟糕，而且提供了一个直观的替代方法。</p><p>忧虑<br>对于 Async/Await，也许你有一些合理的怀疑：</p><p>它使得异步代码不再明显: 我们已经习惯了用回调函数或者.then 来识别异步代码，我们可能需要花数个星期去习惯新的标志。但是，C#拥有这个特性已经很多年了，熟悉它的朋友应该知道暂时的稍微不方便是值得的。<br>Node 7 不是 LTS（长期支持版本）: 但是，Node 8 下个月就会发布，将代码迁移到新版本会非常简单。(Fundebug 注：Node 8 是 LTS，已经于 2017 年 10 月正式发布。)<br><a href="https://zhuanlan.zhihu.com/p/23249103">资料1</a><br><a href="https://blog.fundebug.com/2017/04/04/nodejs-async-await/">资料2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303142200924.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;书写一个web服务器&quot;&gt;&lt;a href=&quot;#书写一个web服务器</summary>
      
    
    
    
    <category term="后端" scheme="https://unspman.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Node.js使用" scheme="https://unspman.github.io/tags/Node-js%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(5.网络)</title>
    <link href="https://unspman.github.io/posts/b27a53d.html"/>
    <id>https://unspman.github.io/posts/b27a53d.html</id>
    <published>2023-01-05T00:00:00.000Z</published>
    <updated>2023-03-14T16:14:16.590Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IP地址和端口"><a href="#IP地址和端口" class="headerlink" title="IP地址和端口"></a>IP地址和端口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IP地址：用来标识网络上不同的设备</span><br><span class="line">端口号：标识同一台设备上不同的网络进程</span><br><span class="line">网络进程：可以联网的，运行起来的程序</span><br><span class="line">0-65535</span><br><span class="line">0-1024(知名端口)</span><br><span class="line">1025-65535</span><br><span class="line">端口号被占用就换一个</span><br><span class="line">端口号也有唯一性，针对同一台设备</span><br></pre></td></tr></table></figure><h3 id="http模块的使用"><a href="#http模块的使用" class="headerlink" title="http模块的使用"></a>http模块的使用</h3><p>搭建后端服务器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//搭建后端服务器</span></span><br><span class="line"><span class="comment">//1.导入HTTP模块</span></span><br><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">//2.定义服务程序的端口号</span></span><br><span class="line"><span class="keyword">const</span> port=<span class="number">8080</span>;</span><br><span class="line"><span class="comment">//3.创建服务器对象</span></span><br><span class="line"><span class="comment">//createServer：创建服务器对象</span></span><br><span class="line"><span class="keyword">const</span> server=http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//每收到一次请求就会执行一次</span></span><br><span class="line">        <span class="comment">//request:请求对象  response:响应对象</span></span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;hello nodejs http&#x27;</span>)<span class="comment">//表示响应工作结束，这个方法后面不要再写响应的一些操作</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4.调用服务器的监听方法，让服务器监听浏览器的请求</span></span><br><span class="line"><span class="comment">//listen: 监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(port,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//用来标识监听有没有出错</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已经运行成功了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一个端口号只能被一个服务器使用，如果端口高号被占用就换一个</span></span><br><span class="line"><span class="comment">end永远放在响应的最后面，多次调用时没有效果的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h3 id="获取请求的一些信息"><a href="#获取请求的一些信息" class="headerlink" title="获取请求的一些信息"></a>获取请求的一些信息</h3><h4 id="获取请求路径"><a href="#获取请求路径" class="headerlink" title="获取请求路径"></a>获取请求路径</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request.url:获取请求路径</span></span><br><span class="line"><span class="keyword">let</span> reUrl=request.<span class="property">url</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reUrl);     <span class="comment">//  /favicon.ico</span></span><br></pre></td></tr></table></figure><h4 id="获取请求路径-1"><a href="#获取请求路径-1" class="headerlink" title="获取请求路径"></a>获取请求路径</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request.url:获取请求路径</span></span><br><span class="line"><span class="keyword">let</span> reUrl=request.<span class="property">url</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reUrl);     <span class="comment">//  /favicon.ico</span></span><br></pre></td></tr></table></figure><h4 id="获取请求方式"><a href="#获取请求方式" class="headerlink" title="获取请求方式"></a>获取请求方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request.method获取请求方式</span></span><br><span class="line"><span class="keyword">let</span> reqMethod=request.<span class="property">method</span>;   </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reqMethod); <span class="comment">//GET</span></span><br></pre></td></tr></table></figure><h4 id="获取get请求参数"><a href="#获取get请求参数" class="headerlink" title="获取get请求参数"></a>获取get请求参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入新的模块-&gt;通过该模块拿到路径</span></span><br><span class="line"><span class="keyword">const</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> parse=url.<span class="title function_">parse</span>(reUrl,<span class="literal">true</span>);<span class="comment">//true解析成一个对象 false解析成一个字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parse.<span class="property">query</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parse.<span class="property">query</span>.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parse.<span class="property">query</span>.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><h4 id="获取post请求参数"><a href="#获取post请求参数" class="headerlink" title="获取post请求参数"></a>获取post请求参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request:请求对象  response:响应对象</span></span><br><span class="line"><span class="comment">//获取账号和密码，获取post请求的参数</span></span><br><span class="line"><span class="comment">//以事件的方式来接收,事件名data</span></span><br><span class="line">request.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">postData</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(postData.<span class="title function_">toString</span>());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="nodemon包的使用"><a href="#nodemon包的使用" class="headerlink" title="nodemon包的使用"></a>nodemon包的使用</h3><p>监听代码改动自动更新<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon </span><br></pre></td></tr></table></figure><br>再VSCODE拓展中找到code Runner—&gt;设置处选择拓展设置—&gt;找到Code-runner:Executor Map并点击再setting.json中编辑—&gt;将”javascript”: “node”改为”javascript”: “nodemon”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;IP地址和端口&quot;&gt;&lt;a href=&quot;#IP地址和端口&quot; class=&quot;headerlink&quot; title=&quot;IP地址和端口&quot;&gt;&lt;/a&gt;IP地址和端口&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="后端" scheme="https://unspman.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Node.js使用" scheme="https://unspman.github.io/tags/Node-js%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(4.模块)</title>
    <link href="https://unspman.github.io/posts/3d2cba76.html"/>
    <id>https://unspman.github.io/posts/3d2cba76.html</id>
    <published>2023-01-04T00:00:00.000Z</published>
    <updated>2023-03-14T16:14:16.590Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nodejs.cn/api/">node.js官方api文档</a></p><p>node.js内置模块，自定义模块(自己书写的模块)，第三方模块(使用npm去安装使用)</p><h3 id="node-js常用内置模块"><a href="#node-js常用内置模块" class="headerlink" title="node.js常用内置模块"></a>node.js常用内置模块</h3><h4 id="buffer数据类型"><a href="#buffer数据类型" class="headerlink" title="buffer数据类型"></a>buffer数据类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf1=<span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>]);<span class="comment">//创建一个buffer对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf1);  <span class="comment">//&lt;Buffer 61 62 63&gt; 16进制</span></span><br><span class="line"><span class="comment">//通过toString()转换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf1.<span class="title function_">toString</span>());   <span class="comment">//abc</span></span><br><span class="line"><span class="keyword">let</span> buf2=<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf2);  <span class="comment">//&lt;Buffer 68 65 6c 6c 6f&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf2.<span class="title function_">toString</span>());   <span class="comment">//hello</span></span><br></pre></td></tr></table></figure><h4 id="fs-文件操作"><a href="#fs-文件操作" class="headerlink" title="fs: 文件操作"></a>fs: 文件操作</h4><h5 id="同步读取文件信息："><a href="#同步读取文件信息：" class="headerlink" title="同步读取文件信息："></a>同步读取文件信息：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步读取文件信息</span></span><br><span class="line"><span class="comment">//引入fs模块 和 path模块</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> filePath=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;hello.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用fs里面的方法</span></span><br><span class="line"><span class="comment">//sync同步  需要读取完成前面的数据才会读取后面的信息</span></span><br><span class="line"><span class="keyword">let</span> content1=fs.<span class="title function_">readFileSync</span>(filePath);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content1.<span class="title function_">toString</span>());    <span class="comment">//hello~node 读取hello.txt文件内容</span></span><br><span class="line"><span class="keyword">let</span> content2=fs.<span class="title function_">readFileSync</span>(filePath,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="comment">//使用utf-8转换buffer</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content2);  <span class="comment">//hello~node </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="异步读取文件信息："><a href="#异步读取文件信息：" class="headerlink" title="异步读取文件信息："></a>异步读取文件信息：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步读取文件信息</span></span><br><span class="line"><span class="comment">//引入fs模块 和 path模块</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> filePath=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;hello.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步读取，需要三个参数 路径；编码；回调函数 </span></span><br><span class="line">fs.<span class="title function_">readFile</span>(filePath,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">error,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123;<span class="comment">//如果读取文件成功，error是null</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">你好</span></span><br><span class="line"><span class="comment">hello~node</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="异步写入文件信息："><a href="#异步写入文件信息：" class="headerlink" title="异步写入文件信息："></a>异步写入文件信息：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步写入</span></span><br><span class="line"><span class="comment">//引入fs模块 和 path模块</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> filePath=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;hello.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//writeFile：覆盖写  参数:文件路径，写入的内容，&#x27;utf-8&#x27;,回调函数</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(filePath,<span class="string">&#x27;hello world!&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//常用的方法</span></span><br><span class="line"><span class="comment">//renameSync：修改文件名 参数：旧文件名，新文件名</span></span><br><span class="line">fs.<span class="title function_">renameSync</span>(<span class="string">&#x27;001/hello.txt&#x27;</span>,<span class="string">&#x27;001/hello01.txt&#x27;</span>);</span><br><span class="line"><span class="comment">//readdirSync获取当前路径下的所有的文件名</span></span><br><span class="line"><span class="keyword">let</span> paths=fs.<span class="title function_">readdirSync</span>(__dirname);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(paths);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  &#x27;001.docx&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;buffer数据类型.js&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;demo.js&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;fs-同步读取文件信息.js&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;fs-异步读取文件信息&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;hello.js&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;hello.txt&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;m1.js&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;module&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;path内置模块.js&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;异步写入.js&#x27;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//str类型操作</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">endsWith</span>(<span class="string">&#x27;lo&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">endsWith</span>(<span class="string">&#x27;w&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">2</span>));<span class="comment">//llo 从下标2开始截取到最后</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">2</span>,<span class="number">3</span>));<span class="comment">//l 从下标2-&gt;3不包含3</span></span><br></pre></td></tr></table></figure><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把当前文件夹下的js文件的名字都添加前缀node-</span></span><br><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> paths=fs.<span class="title function_">readdirSync</span>(__dirname);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(paths.<span class="title function_">at</span>(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//循环，拿到列表里的每一位</span></span><br><span class="line">paths.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item.<span class="title function_">endsWith</span>(<span class="string">&#x27;.js&#x27;</span>))&#123;</span><br><span class="line">        fs.<span class="title function_">renameSync</span>(path.<span class="title function_">join</span>(__dirname,item),__dirname+<span class="string">&#x27;/&#x27;</span>+<span class="string">&#x27;node-&#x27;</span>+item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//把当前文件夹的js文件的名字都删除前缀node-</span></span><br><span class="line">paths.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item.<span class="title function_">startsWith</span>(<span class="string">&#x27;node-&#x27;</span>))&#123;</span><br><span class="line">        fs.<span class="title function_">renameSync</span>(item,item.<span class="title function_">substring</span>(<span class="string">&#x27;node-&#x27;</span>.<span class="property">length</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="http-网络操作"><a href="#http-网络操作" class="headerlink" title="http:网络操作"></a>http:网络操作</h4><h4 id="path-路径操作"><a href="#path-路径操作" class="headerlink" title="path:路径操作"></a><a href="https://nodejs.cn/api/path.html">path:路径操作</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入path模块</span></span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//俩个特殊的变量</span></span><br><span class="line"><span class="comment">//当前执行的文件绝对路径，不包含文件名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname);     <span class="comment">//d:\code_trying\VSCode\node.js\001</span></span><br><span class="line"><span class="comment">//当前执行的文件绝对路径，包含文件名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__filename);    <span class="comment">//d:\code_trying\VSCode\node.js\001\path内置模块.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//extname方法：获取指定文件的扩展名（后缀名）</span></span><br><span class="line"><span class="keyword">let</span> extname=path.<span class="title function_">extname</span>(__filename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(extname);       <span class="comment">//.js</span></span><br><span class="line"><span class="comment">//basename方法：获取指定文件名</span></span><br><span class="line"><span class="keyword">let</span> basename=path.<span class="title function_">basename</span>(__filename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(basename);      <span class="comment">//path内置模块.js</span></span><br><span class="line"><span class="comment">//dirname方法：获取指定文件当前所在的绝对路径</span></span><br><span class="line"><span class="keyword">let</span> dirname=path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dirname);       <span class="comment">//d:\code_trying\VSCode\node.js\001</span></span><br><span class="line"><span class="comment">//parse方法：获取文件信息</span></span><br><span class="line"><span class="keyword">let</span> parse=path.<span class="title function_">parse</span>(__filename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parse);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  root: &#x27;d:\\&#x27;,</span></span><br><span class="line"><span class="comment">  dir: &#x27;d:\\code_trying\\VSCode\\node.js\\001&#x27;,</span></span><br><span class="line"><span class="comment">  base: &#x27;path内置模块.js&#x27;,</span></span><br><span class="line"><span class="comment">  ext: &#x27;.js&#x27;,</span></span><br><span class="line"><span class="comment">  name: &#x27;path内置模块&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parse.<span class="property">name</span>);    <span class="comment">//path内置模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接操作(可以拿到某一个文件的完整态)</span></span><br><span class="line"><span class="keyword">let</span> fullpath1=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;path.js&#x27;</span>);           <span class="comment">//d:\code_trying\VSCode\node.js\001\path.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullpath1);</span><br><span class="line"><span class="comment">//获取module文件夹下的m1.js</span></span><br><span class="line"><span class="keyword">let</span> fullpath2=path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;module&#x27;</span>,<span class="string">&#x27;m1.js&#x27;</span>);    <span class="comment">//d:\code_trying\VSCode\node.js\001\module\m1.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullpath2);</span><br></pre></td></tr></table></figure><h4 id="querystring-查询参数-查询字符串-解析？后面的参数"><a href="#querystring-查询参数-查询字符串-解析？后面的参数" class="headerlink" title="querystring: 查询参数(查询字符串)解析？后面的参数"></a>querystring: 查询参数(查询字符串)解析？后面的参数</h4><h4 id="url-解析"><a href="#url-解析" class="headerlink" title="url: 解析"></a>url: 解析</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://nodejs.cn/api/&quot;&gt;node.js官方api文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;node.js内置模块，自定义模块(自己书写的模块)，第三方模块(使用npm去安装使用)&lt;/p&gt;
&lt;h3 id=&quot;node-js常用内置模块&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="后端" scheme="https://unspman.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Node.js使用" scheme="https://unspman.github.io/tags/Node-js%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(3.自定义模块)</title>
    <link href="https://unspman.github.io/posts/fdd77561.html"/>
    <id>https://unspman.github.io/posts/fdd77561.html</id>
    <published>2023-01-03T00:00:00.000Z</published>
    <updated>2023-03-14T16:14:16.590Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141246709.jpg" alt=""><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141244023.jpg" alt=""></p><h4 id="CommonJs的模块的使用"><a href="#CommonJs的模块的使用" class="headerlink" title="CommonJs的模块的使用"></a>CommonJs的模块的使用</h4><h5 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getsum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出方式一</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">a</span>=a;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getsum</span>=getsum;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出方式二</span></span><br><span class="line"><span class="comment">//通过module.exports等于一个对象，来导出数据</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    a,getsum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m1=<span class="built_in">require</span>(<span class="string">&#x27;./m1.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1);                <span class="comment">//&#123; a: 10, getsum: [Function: getsum] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">a</span>);              <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="title function_">getsum</span>(<span class="number">1</span>,<span class="number">2</span>));    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h5 id="模块里面的this的指向问题"><a href="#模块里面的this的指向问题" class="headerlink" title="模块里面的this的指向问题"></a>模块里面的this的指向问题</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);              <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span>===<span class="variable language_">this</span>)     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//node 里面没有window对象，但是有全局对象global</span></span><br><span class="line"><span class="comment">//nodejs声明这个变量，不会被添加到global全局对象中</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>.<span class="property">b</span>);          <span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//可以给global添加成员</span></span><br><span class="line"><span class="variable language_">global</span>.<span class="property">c</span>=<span class="number">30</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>.<span class="property">c</span>);          <span class="comment">//30</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141246709.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/Un</summary>
      
    
    
    
    <category term="后端" scheme="https://unspman.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Node.js使用" scheme="https://unspman.github.io/tags/Node-js%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(2.NVM下载)</title>
    <link href="https://unspman.github.io/posts/189e69f4.html"/>
    <id>https://unspman.github.io/posts/189e69f4.html</id>
    <published>2023-01-02T00:00:00.000Z</published>
    <updated>2023-03-14T16:14:16.590Z</updated>
    
    <content type="html"><![CDATA[<h4 id="NVM下载"><a href="#NVM下载" class="headerlink" title="NVM下载"></a>NVM下载</h4><p><a href="https://github.com/coreybutler/nvm-windows/releases">下载链接</a><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141038072.png" alt="1"></p><h4 id="nvm安装"><a href="#nvm安装" class="headerlink" title="nvm安装"></a>nvm安装</h4><p>如果电脑上之前已经单独安装了node，先卸载，然后解压nvm-setup.zip安装包，进入解压的文件夹，双击exe后缀文件进行安装<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141039878.png" alt="2"><br>下面这个界面是选择安装nvm的路径，自己可以更改安装路径，一般默认路径<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141041936.png" alt="3"><br>下面这个是nodejs的安装位置，如果没有nodejs文件夹就新建一个(后来发现他会自动生成一个快捷方式)<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141041401.png" alt="4"><br>安装完毕后输入 nvm -v 查看版本<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141042952.png" alt="5"></p><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>如果安装到D盘，则需要配置相对应的环境，如图：（输入相对应的文件位置）<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141103776.png" alt=""><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141104618.png" alt=""></p><h4 id="设置setting-txt-可忽略不设置"><a href="#设置setting-txt-可忽略不设置" class="headerlink" title="设置setting.txt(可忽略不设置)"></a>设置setting.txt(可忽略不设置)</h4><p>安装完毕后，找到安装的路径，一些简单配置，打开setting.txt<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141044276.png" alt="6"><br>在后面添加这两行代码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141045299.png" alt="7"></p><h4 id="nvm的使用"><a href="#nvm的使用" class="headerlink" title="nvm的使用"></a>nvm的使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nvm off                     // 禁用node.js版本管理(不卸载任何东西)</span><br><span class="line">nvm on                      // 启用node.js版本管理</span><br><span class="line">nvm install <span class="tag">&lt;<span class="name">version</span>&gt;</span>       // 安装node.js的命名 version是版本号 例如：nvm install 8.12.0</span><br><span class="line">nvm uninstall <span class="tag">&lt;<span class="name">version</span>&gt;</span>     // 卸载node.js是的命令，卸载指定版本的nodejs，当安装失败时卸载使用</span><br><span class="line">nvm ls                      // 显示所有安装的node.js版本</span><br><span class="line">nvm list available          // 显示可以安装的所有node.js的版本</span><br><span class="line">nvm use <span class="tag">&lt;<span class="name">version</span>&gt;</span>           // 切换到使用指定的nodejs版本</span><br><span class="line">nvm v                       // 显示nvm版本</span><br><span class="line">nvm install stable          // 安装最新稳定版</span><br></pre></td></tr></table></figure><p>见下图：<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141047624.png" alt="8"><br>如果使用node -v，提示node:command not found,则需要nvm use node版本号，见下图<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141048177.png" alt="9"><br>下面显示当前使用的node版本是14.16.1<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141049252.png" alt="10"></p><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><h5 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h5><p><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141127264.png" alt=""><br>解决方法<br>在c盘默认安装路径上将nodejs文件夹 删除<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141127910.png" alt=""><br>之后重新use node版本，查看版本成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;NVM下载&quot;&gt;&lt;a href=&quot;#NVM下载&quot; class=&quot;headerlink&quot; title=&quot;NVM下载&quot;&gt;&lt;/a&gt;NVM下载&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/coreybutler/nvm-windows/releas</summary>
      
    
    
    
    <category term="后端" scheme="https://unspman.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="NVM下载" scheme="https://unspman.github.io/tags/NVM%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Node.js(1.Node.js下载)</title>
    <link href="https://unspman.github.io/posts/c5e4639a.html"/>
    <id>https://unspman.github.io/posts/c5e4639a.html</id>
    <published>2023-01-01T00:00:00.000Z</published>
    <updated>2023-03-14T16:14:16.590Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Node-js下载"><a href="#Node-js下载" class="headerlink" title="Node.js下载"></a>Node.js下载</h4><p><a href="https://nodejs.org/en/">下载链接</a></p><h4 id="一路next"><a href="#一路next" class="headerlink" title="一路next"></a>一路next</h4><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303132338907.png" alt="1"></p><h4 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如下图所示，即为安装成功：<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303140956163.png" alt="2"></p><h4 id="修改模块下载位置"><a href="#修改模块下载位置" class="headerlink" title="修改模块下载位置"></a>修改模块下载位置</h4><p>使用npm get prefix查看npm全局模块的存放路径<br>使用npm get cache查看npm缓存默认存放路径<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm get prefix</span><br><span class="line">npm get cache</span><br></pre></td></tr></table></figure><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303140957517.png" alt="3"><br>如上图所示，npm 全局模块存放位置以及cache的存放位置，默认是在 C 盘 “C:Users用户AppData” 下。</p><h5 id="在-nodejs-安装目录下，创建-“node-global”-和-“node-cache”-两个文件夹"><a href="#在-nodejs-安装目录下，创建-“node-global”-和-“node-cache”-两个文件夹" class="headerlink" title="在 nodejs 安装目录下，创建 “node_global” 和 “node_cache” 两个文件夹"></a>在 nodejs 安装目录下，创建 “node_global” 和 “node_cache” 两个文件夹</h5><p>!<img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303140957013.png" alt="4"></p><h5 id="修改默认文件夹"><a href="#修改默认文件夹" class="headerlink" title="修改默认文件夹"></a>修改默认文件夹</h5><p>设置全局模块的安装路径到 “node_global” 文件夹<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\Node.js\node_global&quot;</span><br></pre></td></tr></table></figure><br>设置缓存到 “node_cache” 文件夹<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set cache &quot;D:\Node.js\node_cache&quot;</span><br></pre></td></tr></table></figure><br>如下图所示：<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303140958772.png" alt="5"></p><h5 id="注意：由于-node-全局模块大多数都是可以通过命令行访问的，还要把【node-global】的路径“E-devTools-odejs-ode-global”加入到【系统变量-】下的【PATH】-变量中，方便直接使用命令行运行，如下图所示："><a href="#注意：由于-node-全局模块大多数都是可以通过命令行访问的，还要把【node-global】的路径“E-devTools-odejs-ode-global”加入到【系统变量-】下的【PATH】-变量中，方便直接使用命令行运行，如下图所示：" class="headerlink" title="注意：由于 node 全局模块大多数都是可以通过命令行访问的，还要把【node_global】的路径“E:devTools odejs ode_global”加入到【系统变量 】下的【PATH】 变量中，方便直接使用命令行运行，如下图所示："></a>注意：由于 node 全局模块大多数都是可以通过命令行访问的，还要把【node_global】的路径“E:devTools odejs ode_global”加入到【系统变量 】下的【PATH】 变量中，方便直接使用命令行运行，如下图所示：</h5><p><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303140958092.png" alt="6"></p><h5 id="测试默认位置是否更改成功"><a href="#测试默认位置是否更改成功" class="headerlink" title="测试默认位置是否更改成功"></a>测试默认位置是否更改成功</h5><p>经过上面的步骤，nodejs下载的模块就会自动下载到我们自定义的目录，接下来我们测试一下是否更改成功。输入下面的命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br></pre></td></tr></table></figure><br>或者<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --global</span><br></pre></td></tr></table></figure><br>注意：“-g”等同于“–global”，“-g” 是全局安装，不加“-g”就是默认下载到当前目录。“-g” 表示安装到之前设置的【node_global】目录下，同时nodejs会自动地在node_global文件夹下创建【node_modules】子文件夹， 即自动下载到“D:\Node.js\node_global\Node_modules” 路径下。<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303140959085.png" alt="7"><br>express模块成功，然后在文件管理器中查看是否保存到上面自定义的路径下。<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141000250.png" alt="8"><br>可以看到，express模块已经成功地下载到【E:devTools odejs ode_global ode_modules】下。<br>注意:若执行命令npm install express -g出现如下报错：<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141000973.png" alt="9"><br>是由于对文件夹操作的权限不够，右击Nodejs文件夹-&gt;属性-&gt;安全，点击编辑，将所有权限都即可。<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141000277.png" alt="10"><br>※执行npm install express -g仍然出错的话继续将nodejs下【node_cache】、【node_global】、【node_modules】这三个文件夹的所有权限勾选，再次执行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br></pre></td></tr></table></figure><br>即可下载成功。</p><h4 id="设置淘宝镜像"><a href="#设置淘宝镜像" class="headerlink" title="设置淘宝镜像"></a>设置淘宝镜像</h4><h5 id="将npm默认的registry修改为淘宝registry"><a href="#将npm默认的registry修改为淘宝registry" class="headerlink" title="将npm默认的registry修改为淘宝registry"></a>将npm默认的registry修改为淘宝registry</h5><p>说明：npm 默认的 registry ,也就是下载 npm 包时会从国外的服务器下载，国内下载会很慢，一般更换为淘宝镜像：<a href="https://registry.npm.taobao.org。">https://registry.npm.taobao.org。</a><br>1.查看当前使用的镜像路径<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141001192.png" alt="11"><br>2.更换npm为淘宝镜像<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141001941.png" alt="12"><br>3 检查镜像是否配置成功<br>再次执行npm config get registry，检查当前的镜像路径：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141001048.png" alt="13"><br>如上图所示，npm默认的registry已修改为淘宝registry。</p><h5 id="全局安装基于淘宝源的cnpm"><a href="#全局安装基于淘宝源的cnpm" class="headerlink" title="全局安装基于淘宝源的cnpm"></a>全局安装基于淘宝源的cnpm</h5><p>说明：由于npm的服务器在海外，所以访问速度比较慢，访问不稳定 ，cnpm的服务器是由淘宝团队提供，服务器在国内，cnpm是npm镜像，一般会同步更新，相差在10分钟，所以cnpm在安装一些软件时候会比较有优势。但是cnpm一般只用于模块安装，在项目创建与卸载等相关操作时仍使用npm。<br>1 全局安装基于淘宝源的cnpm<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141001238.png" alt="14"><br>2 本地查看cnpm模块<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141002503.png" alt="15"><br>3 执行命令查看cnpm是否安装成功<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><br>如下图所示，即代表cnpm配置成功。<br><img src="https://cdn.staticaly.com/gh/UnSpMan/picgo@master/img/202303141002821.png" alt="16"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Node-js下载&quot;&gt;&lt;a href=&quot;#Node-js下载&quot; class=&quot;headerlink&quot; title=&quot;Node.js下载&quot;&gt;&lt;/a&gt;Node.js下载&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;下载链接&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="后端" scheme="https://unspman.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Node.js" scheme="https://unspman.github.io/tags/Node-js/"/>
    
  </entry>
  
</feed>
